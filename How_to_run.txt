HOW TO RUN:

Clone this repo:
The final Project tree should look like:
StockInvestmentProject/ │ ├── db_config.py ├── create_tables.sql ├── generate_dummy_data.py ├── transactions.csv ├── load_transactions.py ├── update_portfolio.py ├── analyze.py ├── requirements.txt ├── .gitignore └── README.md

Install Python packages(Terminal):

pip install -r requirements.txt

Setup MySQL DB: Open terminal:

mysql -u root -p < create_tables.sql

This: Creates your stock_investments DB Creates tables: investors, transactions, portfolios.

Add a dummy CSV (one time)

Make sure transactions.csv exists(already existing in folder).

OR Run,

python generate_dummy_data.py

This will create a big file (transactions.csv with 10,000+ rows).

Load transactions into DB:

Run,

python load_transactions.py

Update portfolios:

Run,

python update_portfolio.py

This: Runs a JOIN & subquery. Calculates total quantity, average buy price, risk score. Stores it in portfolios.

Analyze and Visualize:

Run,

python analyze.py

This:

Pulls portfolios data. Plots a bar chart with seaborn. Opens a window so you see who owns what stocks.

✅Batch Mode

In Batch Mode, you run the ETL automatically at intervals (like hourly).

How to do it?

Open terminal:
Run,

crontab -e

2️. Add:

0 * * * * /usr/bin/python3 /path/to/StockInvestmentProject/load_transactions.py (# Run loader every hour)

5 * * * * /usr/bin/python3 /path/to/StockInvestmentProject/update_portfolio.py (# Run updater every hour, 5 mins later)

This:

Loads new transactions hourly. Updates portfolios hourly.

✅Real-Time Mode Batch means “process all at once, on schedule”. Real-time means “process each new trade immediately”.

A simple version for real-time:

-Use watchdog (a Python library) to monitor a folder for a new CSV.

-Or connect to a message broker (Kafka, RabbitMQ, etc).

Example simple loop:

pseudo-realtime.py
import time

import os

while True:

if os.path.exists("transactions.csv"):
    os.system("python load_transactions.py")
    os.system("python update_portfolio.py")
time.sleep(10)  # check every 10 sec
OR for Kafka-style:

 -Send each new trade as a message.

 -Have a Python consumer that runs update_portfolio.py instantly.
